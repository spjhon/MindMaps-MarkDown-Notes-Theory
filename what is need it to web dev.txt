Not only that, but how do you even quantify it?

You'll need to know some HTML. How many tags? Hard to say. What about W3C validation and knowing that block and inline elements are? Aria attributes? How does the <dialog> actually work? Does that include CSS knowledge? JavaScript? What if you need to use TypeScript?

Speaking of, what about CSS? It's not a "you know 20% of CSS so you can get a job!" type of deal. Knowing CSS is just part of the battle, choosing the correct CSS properties and values is what makes you a beginner or a master.

Browser differences? JavaScript? React? Vue? Svelte? Angular? Web components? Which of the many dozens of browser APIs? Text readers? Developer tools?

IDEs? CI/CD? Build pipelines? Git? A CSS framework? REST patterns? API design? Versioning? Back-end design principles? Visual design principles? Knowledge of UX?

State management? Routing? Event binding? Dependency injections? Unit testing, end-to-end testing, integration testing? Do you know about XPath selectors? Do you need to for an entry-level job?

It's impossible to say.

You need to be GOOD at web development in general. That takes a lot of time and effort and there's no quick and easy way to learn all of that.

I've interviewed over 500 people, and reviewed thousands of resumes and cover letters and the likes.

For every person who didn't know nearly enough, there were 20 others who knew what we were looking for. And maybe 2 or 3 of those would get an invite to interview (beyond the initial recruiter-chat) based on some trivialities.